JSON Reference:

This is represents the dependency structure, NOT the json nesting!
Short example to understand:

- foo:
    "nope"
    "bar"
        - baz
- hurr

If there is an key foo with value "bar", there will be another key bar.
{"foo":"bar", "baz":2, "hurr":3}
{"foo":"nope", "hurr":3}

If something is not always present, it is marked with an "*" and a condition is given after a "|":
    - foo
    * bar: [int] some random value | only sundays.
Lets begin:




JSON Reference:
===============
* error: [string] if pytg2 failed processing. If error is given, don't expect the other fields to exist!
- event:
	"download"
        - id: unique message number [number]
	    - file: The path [string] or [null], if download failed.
	"message"
        - id: unique message number [number]
	    - freshness: [string] Shows how fresh a message is: (You probably only want to process +1 (and maybe 0)
	        "old"     (binlog, already processed once some sessions ago. Is loaded from disk),
	        "startup" (diff, what is not processed, but happened before the startup of this session)
	        "new"     (That message was received since the CLI is running.)
        - flags: [int] yeah, no idea.
        - forward: [peer/null] from who the message originally is, or [null] if not forwarded.
        * reply_id: [int] (id of the original message?)
        - mention: [bool] (?)
        - sender: [peer] who send it.
        - receiver: [peer] who can read it now. (should be either a group or the bot)
        - peer: [peer] or [null] where you want to reply to, either the group chat if it was in a group chat, else the user's chat (will be equal to either 'sender' or 'receiver'). should be [null] if the bot sent this message.
        - own: [bool] if the bot's account send it.
        - unread: [bool] if the message is marked as read.
        - date: [int]
        - service: [bool] If it is a normal message (false) or stuff like username changes etc..
            false:
                * text: [string] | either text or media
                * media: [media] | either text or media
            true:
                - type: [int]
                  "none"
                  "geo_created" geochat created
                  "geo_checkin" checking in geochat"
                  "chat_created" a user created a new chat with you in it.
                      - title: [string] the chat's title
                      - members_num: [int] the count of initial added users
                  "chat_rename" changed chat title
                      - title: [string] the new title
                  "chat_change_photo" changed chat photo
                  "chat_delete_photo" deleted chat photo
                  "chat_add_user" added user to chat
                      - user: [peer] the new user
                  "chat_add_user_link"
                      - link_issuer: [peer]
                  "chat_del_user" deleted user from chat
                      - user: [peer] the deleted user
                  "set_ttl" set secure chat timeout
                      - seconds [int] the ttl in seconds
                  "read" marked messages read
                      - count: [int] how many messages got marked as read
                  "delete" messages deleted
                      - count: [int] how many messages were deleted
                  "screenshot" messages screenshoted
                      - count: [int] probably, how many messages were on the screenshot
                  "flush" cleared(?) history
                  "resend" resend query
                  "set_layer" updated layer
                      - layer: [int]
                  "typing"
                      - status [int]
                      - text [string]
                          0 "doing nothing"
                          1 "typing"
                          2 "deleting typed message"
                          3 "recording video"
                          4 "uploading video"
                          5 "recording audio"
                          6 "uploading audio"
                          7 "uploading photo"
                          8 "uploading document"
                          9 "choosing location"
                         10 "choosing contact"
                  "nop" (I have no idea what that is... The used enum is 'tgl_message_action_noop'
                  "request_rekey" request rekey
                      - id [string] unsigned long long int in hexadecimal notation occupying a minimum of 16 positions, padded with 0
                  "accept_rekey" accept rekey
                      - id [string] unsigned long long int in hexadecimal notation occupying a minimum of 16 positions, padded with 0
                  "commit_rekey" commit rekey
                      - id [string] unsigned long long int in hexadecimal notation occupying a minimum of 16 positions, padded with 0
                  "abort_rekey" abort rekey
                      - id [string] unsigned long long int in hexadecimal notation occupying a minimum of 16 positions, padded with 0


[media]
    - type:
        "photo"
            - encrypted: [bool]
            * caption: original file name | if present on non encrypted photo
        "document"
            - encrypted: [bool]
            - document: [string] Type of the document
                "image"
                "audio"
                "video"
                "sticker"
                "document" (everything else)
            * caption: original file name as [string]   | if value present
            * mime: [string] MIME-type, eg. "image/png" | if value present
            * dimension: [size] pixel width and height  | if value present
            * duration: [int] in seconds                | if value present
            - size: human readable [string] e.g. "1MiB
            - bytes: [int] of the bytes e.g. 1243380
        "contact"
            - phone: [string] often starting with "+" sign! (the formatting depends on the sending client, the allowed characters are digits, the plus sign, "*","#" (so you can actually send "+++++" as number))
            - first_name: [string]
            - last_name: [string]
            - user_id: [int] telegram user id, or 0 if not a telegram user.
        "geo"
            - longitude: [long] (6 digits after the decimal)
            - latitude": [long] (same format as longitude)
            - google: [string] Link to google maps, format "https://maps.google.com/?q=12.123456,12.123456"
        "unsupported": well...
        "???": It is not even unsupported. Dealing with serious shit!

[fwd]
    - sender: [peer] who it is from
    - date: [int] when it was originaly send.

[peer]
    - id [int] user/group id
    - type: [string]
        "user"
           - first_name: [string]                    | Can be empty string.
           - last_name: [string]                     | Can be empty string.  ( try dialog_list
           - real_first_name: [string]               | Can be empty string.    or -W parameter )
           - real_last_name: [string]                | Can be empty string.
           - phone: [string] without the leading "+" | Can be empty string.
           - username: [string] @username            | Can be empty string.
        "group"
           - title: [string]
           - members_num: [int]
           * members: [list of peer]        | only if given.
        "encr_chat"
           - user: [peer]
    - cmd: [string]: use this to send a message to the peer. Will be e.g. "user#1234"
    - print_name: [string] or [null]  The name of the user, as it should be displayed.  Null if not created.
    * flags [int]: something? | only if peer is created.

[size]
    - width: [int] mostly used for px
    - height:[int] mostly used for px